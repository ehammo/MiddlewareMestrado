// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protocol/rpc/chat_message.proto

package protocol_rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Messages struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Messages) Reset()         { *m = Messages{} }
func (m *Messages) String() string { return proto.CompactTextString(m) }
func (*Messages) ProtoMessage()    {}
func (*Messages) Descriptor() ([]byte, []int) {
	return fileDescriptor_6424f57fdec98ab8, []int{0}
}

func (m *Messages) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Messages.Unmarshal(m, b)
}
func (m *Messages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Messages.Marshal(b, m, deterministic)
}
func (m *Messages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Messages.Merge(m, src)
}
func (m *Messages) XXX_Size() int {
	return xxx_messageInfo_Messages.Size(m)
}
func (m *Messages) XXX_DiscardUnknown() {
	xxx_messageInfo_Messages.DiscardUnknown(m)
}

var xxx_messageInfo_Messages proto.InternalMessageInfo

func (m *Messages) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Messages) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Messages)(nil), "protocol_rpc.messages")
}

func init() {
	proto.RegisterFile("protocol/rpc/chat_message.proto", fileDescriptor_6424f57fdec98ab8)
}

var fileDescriptor_6424f57fdec98ab8 = []byte{
	// 141 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2f, 0x28, 0xca, 0x2f,
	0xc9, 0x4f, 0xce, 0xcf, 0xd1, 0x2f, 0x2a, 0x48, 0xd6, 0x4f, 0xce, 0x48, 0x2c, 0x89, 0xcf, 0x4d,
	0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0xd5, 0x03, 0xcb, 0x08, 0xf1, 0xc0, 0x14, 0xc4, 0x17, 0x15, 0x24,
	0x2b, 0x59, 0x70, 0x71, 0x40, 0xa5, 0x8b, 0x85, 0x84, 0xb8, 0x58, 0xf2, 0x12, 0x73, 0x53, 0x25,
	0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x21, 0x09, 0x2e, 0x76, 0xa8, 0xbc, 0x04, 0x13,
	0x58, 0x18, 0xc6, 0x35, 0xf2, 0xe7, 0x62, 0x2f, 0x2a, 0x48, 0x76, 0xce, 0x48, 0x2c, 0x11, 0x72,
	0xe1, 0xe2, 0x29, 0x4e, 0xcd, 0x4b, 0xf1, 0x85, 0x19, 0x24, 0xa6, 0x87, 0x6c, 0x87, 0x1e, 0xcc,
	0x02, 0x29, 0x1c, 0xe2, 0x4a, 0x0c, 0x1a, 0x8c, 0x06, 0x8c, 0x49, 0x6c, 0x60, 0x49, 0x63, 0x40,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xfa, 0x4c, 0xde, 0xc5, 0xc2, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RpcChatClient is the client API for RpcChat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RpcChatClient interface {
	SendMessages(ctx context.Context, opts ...grpc.CallOption) (RpcChat_SendMessagesClient, error)
}

type rpcChatClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcChatClient(cc grpc.ClientConnInterface) RpcChatClient {
	return &rpcChatClient{cc}
}

func (c *rpcChatClient) SendMessages(ctx context.Context, opts ...grpc.CallOption) (RpcChat_SendMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RpcChat_serviceDesc.Streams[0], "/protocol_rpc.rpcChat/sendMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &rpcChatSendMessagesClient{stream}
	return x, nil
}

type RpcChat_SendMessagesClient interface {
	Send(*Messages) error
	Recv() (*Messages, error)
	grpc.ClientStream
}

type rpcChatSendMessagesClient struct {
	grpc.ClientStream
}

func (x *rpcChatSendMessagesClient) Send(m *Messages) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rpcChatSendMessagesClient) Recv() (*Messages, error) {
	m := new(Messages)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RpcChatServer is the server API for RpcChat service.
type RpcChatServer interface {
	SendMessages(RpcChat_SendMessagesServer) error
}

// UnimplementedRpcChatServer can be embedded to have forward compatible implementations.
type UnimplementedRpcChatServer struct {
}

func (*UnimplementedRpcChatServer) SendMessages(srv RpcChat_SendMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMessages not implemented")
}

func RegisterRpcChatServer(s *grpc.Server, srv RpcChatServer) {
	s.RegisterService(&_RpcChat_serviceDesc, srv)
}

func _RpcChat_SendMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcChatServer).SendMessages(&rpcChatSendMessagesServer{stream})
}

type RpcChat_SendMessagesServer interface {
	Send(*Messages) error
	Recv() (*Messages, error)
	grpc.ServerStream
}

type rpcChatSendMessagesServer struct {
	grpc.ServerStream
}

func (x *rpcChatSendMessagesServer) Send(m *Messages) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rpcChatSendMessagesServer) Recv() (*Messages, error) {
	m := new(Messages)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RpcChat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol_rpc.rpcChat",
	HandlerType: (*RpcChatServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "sendMessages",
			Handler:       _RpcChat_SendMessages_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protocol/rpc/chat_message.proto",
}
